{
  "version": 3,
  "sources": ["../client/main-graph.js"],
  "sourcesContent": ["// Microsoft Graph API Teams Bot Integration\r\n// This client integrates with the Bot Framework and Microsoft Graph API\r\n\r\n// Global variables\r\nlet socket, chatSessionId, isChatActive = false;\r\nlet currentCall = null;\r\nlet isInMeeting = false;\r\n\r\n// UI elements\r\nconst joinBtn = document.getElementById('joinBtn');\r\nconst leaveBtn = document.getElementById('leaveBtn');\r\nconst voiceTestBtn = document.getElementById('voiceTestBtn');\r\nconst transcriptionBtn = document.getElementById('transcriptionBtn');\r\nconst chatInput = document.getElementById('chatInput');\r\nconst sendChatBtn = document.getElementById('sendChatBtn');\r\nconst chatContainer = document.getElementById('chatContainer');\r\nconst chatSection = document.getElementById('chatSection');\r\nconst logElement = document.getElementById('log');\r\n\r\n// Logging function\r\nfunction log(message) {\r\n  console.log(message);\r\n  const logDiv = document.createElement('div');\r\n  logDiv.textContent = new Date().toLocaleTimeString() + ': ' + message;\r\n  logElement.appendChild(logDiv);\r\n  logElement.scrollTop = logElement.scrollHeight;\r\n}\r\n\r\n// Initialize on page load\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  log('\uD83D\uDE80 Microsoft Graph API Teams Bot initialized');\r\n  log('\uD83D\uDCA1 This version uses Bot Framework + Microsoft Graph API for full meeting integration');\r\n  \r\n  // Check for existing chat session in URL\r\n  checkForExistingChat();\r\n  \r\n  // Initialize Socket.IO connection\r\n  initializeSocket();\r\n});\r\n\r\n// Initialize Socket.IO connection\r\nfunction initializeSocket() {\r\n  socket = io();\r\n  \r\n  socket.on('connect', () => {\r\n    log('\u2705 Connected to chat server');\r\n  });\r\n  \r\n  socket.on('chatMessage', (message) => {\r\n    displayChatMessage(message);\r\n  });\r\n  \r\n  socket.on('chatHistory', (messages) => {\r\n    messages.forEach(msg => displayChatMessage(msg));\r\n  });\r\n  \r\n  socket.on('disconnect', () => {\r\n    log('\u274C Disconnected from chat server');\r\n  });\r\n}\r\n\r\n// Join meeting using Microsoft Graph API\r\nasync function joinMeeting() {\r\n  const meetingLink = document.getElementById('meetingLink').value.trim();\r\n  \r\n  if (!meetingLink) {\r\n    log('\u274C Please enter a Teams meeting link');\r\n    return;\r\n  }\r\n  \r\n  if (!meetingLink.includes('teams.microsoft.com')) {\r\n    log('\u274C Please enter a valid Teams meeting link');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    log('\uD83E\uDD16 Joining meeting via Microsoft Graph API...');\r\n    \r\n    // Get access token (you'll need to implement this based on your app registration)\r\n    const accessToken = await getAccessToken();\r\n    \r\n    if (!accessToken) {\r\n      log('\u274C Failed to get access token. Please check your app registration.');\r\n      return;\r\n    }\r\n    \r\n    // Join meeting via Graph API\r\n    const response = await fetch('/api/graph/join-meeting', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        meetingLink: meetingLink,\r\n        accessToken: accessToken\r\n      })\r\n    });\r\n    \r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      log('\u2705 Successfully joined meeting via Microsoft Graph API!');\r\n      log('\uD83C\uDFA4 Bot is now in the meeting and can provide voice responses');\r\n      \r\n      isInMeeting = true;\r\n      currentCall = result.callId;\r\n      \r\n      // Update UI\r\n      joinBtn.disabled = true;\r\n      leaveBtn.disabled = false;\r\n      voiceTestBtn.disabled = false;\r\n      transcriptionBtn.disabled = false;\r\n      \r\n      // Start chat session\r\n      await startChatSession(meetingLink);\r\n      \r\n      // Auto-play welcome message\r\n      setTimeout(() => {\r\n        testVoiceInMeeting();\r\n      }, 2000);\r\n      \r\n    } else {\r\n      log(`\u274C Failed to join meeting: ${result.error}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Error joining meeting: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Leave meeting\r\nasync function leaveMeeting() {\r\n  if (!isInMeeting) {\r\n    log('\u274C Not currently in a meeting');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    log('\uD83D\uDEAA Leaving meeting...');\r\n    \r\n    const response = await fetch('/api/graph/leave-meeting', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    \r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      log('\u2705 Successfully left the meeting');\r\n      \r\n      isInMeeting = false;\r\n      currentCall = null;\r\n      \r\n      // Update UI\r\n      joinBtn.disabled = false;\r\n      leaveBtn.disabled = true;\r\n      voiceTestBtn.disabled = true;\r\n      transcriptionBtn.disabled = true;\r\n      \r\n      // Stop chat session\r\n      stopChatSession();\r\n      \r\n    } else {\r\n      log(`\u274C Failed to leave meeting: ${result.error}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Error leaving meeting: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Test voice in meeting\r\nasync function testVoiceInMeeting() {\r\n  if (!isInMeeting) {\r\n    log('\u274C Not currently in a meeting');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    log('\uD83C\uDFA4 Testing voice in meeting...');\r\n    \r\n    const response = await fetch('/api/graph/test-voice', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    \r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      log('\u2705 Voice test completed! Check if you can hear the bot in the meeting.');\r\n      \r\n      // Send to chat if available\r\n      if (isChatActive) {\r\n        await sendChatMessage('\uD83C\uDFA4 Voice test: Hello! I can speak in the meeting!', 'Bot');\r\n      }\r\n    } else {\r\n      log(`\u274C Voice test failed: ${result.error}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Error testing voice: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Start audio transcription\r\nasync function startTranscription() {\r\n  if (!isInMeeting) {\r\n    log('\u274C Not currently in a meeting');\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    log('\uD83C\uDFA4 Starting audio transcription...');\r\n    \r\n    const response = await fetch('/api/graph/start-transcription', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n    \r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      log('\u2705 Audio transcription started! Bot will now transcribe meeting audio.');\r\n      transcriptionBtn.textContent = 'Stop Transcription';\r\n      \r\n      // Send to chat if available\r\n      if (isChatActive) {\r\n        await sendChatMessage('\uD83C\uDFA4 Audio transcription started. I will now transcribe the meeting audio.', 'Bot');\r\n      }\r\n    } else {\r\n      log(`\u274C Failed to start transcription: ${result.error}`);\r\n    }\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Error starting transcription: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Stop audio transcription\r\nasync function stopTranscription() {\r\n  try {\r\n    log('\uD83D\uDED1 Stopping audio transcription...');\r\n    \r\n    // For now, we'll just update the UI\r\n    // In a real implementation, you'd call the Graph API to stop transcription\r\n    transcriptionBtn.textContent = 'Start Transcription';\r\n    \r\n    log('\u2705 Audio transcription stopped.');\r\n    \r\n    // Send to chat if available\r\n    if (isChatActive) {\r\n      await sendChatMessage('\uD83D\uDED1 Audio transcription stopped.', 'Bot');\r\n    }\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Error stopping transcription: ${error.message}`);\r\n  }\r\n}\r\n\r\n// Toggle transcription\r\nasync function toggleTranscription() {\r\n  if (transcriptionBtn.textContent.includes('Start')) {\r\n    await startTranscription();\r\n  } else {\r\n    await stopTranscription();\r\n  }\r\n}\r\n\r\n// Get access token (you'll need to implement this based on your app registration)\r\nasync function getAccessToken() {\r\n  try {\r\n    // This is a placeholder - you'll need to implement actual token acquisition\r\n    // based on your Azure AD app registration\r\n    \r\n    // For now, return a placeholder token\r\n    // In practice, you'd use MSAL or similar to get the token\r\n    log('\uD83D\uDD11 Getting access token...');\r\n    \r\n    // You can implement this using:\r\n    // 1. MSAL.js for client-side token acquisition\r\n    // 2. Server-side token acquisition using client credentials\r\n    // 3. Interactive token acquisition\r\n    \r\n    // For now, return null to indicate token acquisition is needed\r\n    return null;\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Error getting access token: ${error.message}`);\r\n    return null;\r\n  }\r\n}\r\n\r\n// Chat functionality (keeping existing)\r\nasync function startChatSession(meetingId) {\r\n  try {\r\n    log('\uD83D\uDD04 Starting chat session...');\r\n    \r\n    const response = await fetch('/chat/start', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ meetingId })\r\n    });\r\n    \r\n    const data = await response.json();\r\n    chatSessionId = data.sessionId;\r\n    isChatActive = true;\r\n    \r\n    // Join the chat room\r\n    socket.emit('joinChat', chatSessionId);\r\n    \r\n    // Show chat interface\r\n    showChatInterface();\r\n    \r\n    // Send initial messages\r\n    await sendChatMessage('\uD83E\uDD16 Bot has joined the meeting via Microsoft Graph API!', 'Bot');\r\n    await sendChatMessage('\uD83C\uDFA4 I can now provide voice responses and audio transcription!', 'Bot');\r\n    \r\n    log('\u2705 Chat session started successfully');\r\n    \r\n  } catch (error) {\r\n    log(`\u274C Failed to start chat session: ${error.message}`);\r\n  }\r\n}\r\n\r\nfunction displayChatMessage(message) {\r\n  const messageDiv = document.createElement('div');\r\n  messageDiv.className = `chat-message ${message.sender === 'Bot' ? 'bot-message' : 'user-message'}`;\r\n  \r\n  const header = document.createElement('div');\r\n  header.className = 'message-header';\r\n  header.innerHTML = `<strong>${message.sender}</strong> <span class=\"timestamp\">${new Date(message.timestamp).toLocaleTimeString()}</span>`;\r\n  \r\n  const content = document.createElement('div');\r\n  content.className = 'message-content';\r\n  content.textContent = message.message;\r\n  \r\n  messageDiv.appendChild(header);\r\n  messageDiv.appendChild(content);\r\n  chatContainer.appendChild(messageDiv);\r\n  chatContainer.scrollTop = chatContainer.scrollHeight;\r\n}\r\n\r\nasync function sendChatMessage(message, sender = 'User') {\r\n  if (!isChatActive || !chatSessionId) return;\r\n  \r\n  try {\r\n    const response = await fetch('/chat/send', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ sessionId: chatSessionId, message, sender })\r\n    });\r\n    \r\n    if (response.ok) {\r\n      log(`Message sent to chat: ${message}`);\r\n    }\r\n  } catch (error) {\r\n    log(`\u274C Failed to send chat message: ${error.message}`);\r\n  }\r\n}\r\n\r\nfunction stopChatSession() {\r\n  if (isChatActive && chatSessionId) {\r\n    socket.emit('leaveChat', chatSessionId);\r\n    isChatActive = false;\r\n    chatSessionId = null;\r\n    hideChatInterface();\r\n    log('\uD83D\uDED1 Chat session stopped');\r\n  }\r\n}\r\n\r\nfunction showChatInterface() {\r\n  chatSection.style.display = 'block';\r\n}\r\n\r\nfunction hideChatInterface() {\r\n  chatSection.style.display = 'none';\r\n}\r\n\r\nfunction checkForExistingChat() {\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const chatParam = urlParams.get('chat');\r\n  \r\n  if (chatParam) {\r\n    log(`\uD83D\uDD17 Found existing chat session: ${chatParam}`);\r\n    chatSessionId = chatParam;\r\n    isChatActive = true;\r\n    showChatInterface();\r\n    socket.emit('joinChat', chatSessionId);\r\n  }\r\n}\r\n\r\n// Event listeners\r\njoinBtn.onclick = () => joinMeeting();\r\nleaveBtn.onclick = () => leaveMeeting();\r\nvoiceTestBtn.onclick = () => testVoiceInMeeting();\r\ntranscriptionBtn.onclick = () => toggleTranscription();\r\n\r\n// Chat input handling\r\nchatInput.addEventListener('keypress', (e) => {\r\n  if (e.key === 'Enter') {\r\n    sendChatInput();\r\n  }\r\n});\r\n\r\nsendChatBtn.onclick = sendChatInput;\r\n\r\nfunction sendChatInput() {\r\n  const message = chatInput.value.trim();\r\n  if (message && isChatActive) {\r\n    sendChatMessage(message);\r\n    chatInput.value = '';\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
